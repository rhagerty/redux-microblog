{"ast":null,"code":"import axios from \"axios\";\nimport { REMOVE_POST, ADD_POST, UPDATE_POST, VOTE, ADD_COMMENT, REMOVE_COMMENT, FETCH_POST } from \"./types\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api/posts\";\nexport function getPostFromAPI(id) {\n  return async function (dispatch) {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return dispatch(getPost(response.data));\n  };\n}\n\nfunction getPost(post) {\n  return {\n    type: FETCH_POST,\n    post\n  };\n}\n\nexport function sendPostToAPI(title, description, body) {\n  return async function (dispatch) {\n    const response = await axios.post(`${API_URL}`, {\n      title,\n      description,\n      body\n    });\n    return dispatch(addPost(response.data));\n  };\n}\n\nfunction addPost(post) {\n  return {\n    type: ADD_POST,\n    post\n  };\n}\n\nexport function removePostFromAPI(id) {\n  return async function (dispatch) {\n    await axios.delete(`${API_URL}/${id}`);\n    return dispatch(removePost(id));\n  };\n}\n\nfunction removePost(postId) {\n  return {\n    type: REMOVE_POST,\n    postId\n  };\n}\n\nexport function updatePostInAPI(id, title, description, body) {\n  return async function (dispatch) {\n    const response = await axios.put(`${API_URL}/${id}`, {\n      title,\n      description,\n      body\n    });\n    return dispatch(updatePost(response.data));\n  };\n}\n\nfunction updatePost(post) {\n  return {\n    type: UPDATE_POST,\n    post\n  };\n}\n\nexport function sendVoteToAPI(id, direction) {\n  return async function (dispatch) {\n    const response = await axios.post(`${API_URL}/${id}/vote/${direction}`);\n    return dispatch(vote(id, response.data.votes));\n  };\n}\n\nfunction vote(postId, votes) {\n  return {\n    type: VOTE,\n    postId: postId,\n    votes: votes\n  };\n}\n\nexport function removeCommentFromAPI(postId, commentId) {\n  return async function (dispatch) {\n    await axios.delete(`${API_URL}/${postId}/comments/${commentId}`);\n    return dispatch(removeComment(postId, commentId));\n  };\n}\n\nfunction removeComment(postId, commentId) {\n  return {\n    type: REMOVE_COMMENT,\n    postId,\n    commentId\n  };\n}\n\nexport function sendCommentToAPI(postId, text) {\n  return async function (dispatch) {\n    const result = await axios.post(`${API_URL}/${postId}/comments/`, {\n      text\n    });\n    return dispatch(addComment(postId, result.data));\n  };\n}\n\nfunction addComment(postId, comment) {\n  return {\n    type: ADD_COMMENT,\n    postId,\n    comment\n  };\n}","map":{"version":3,"sources":["C:/Users/rlhag/OneDrive/Desktop/Coding Pt 2/redux-microblog/frontend/src/actions/posts.js"],"names":["axios","REMOVE_POST","ADD_POST","UPDATE_POST","VOTE","ADD_COMMENT","REMOVE_COMMENT","FETCH_POST","API_URL","process","env","REACT_APP_API_URL","getPostFromAPI","id","dispatch","response","get","getPost","data","post","type","sendPostToAPI","title","description","body","addPost","removePostFromAPI","delete","removePost","postId","updatePostInAPI","put","updatePost","sendVoteToAPI","direction","vote","votes","removeCommentFromAPI","commentId","removeComment","sendCommentToAPI","text","result","addComment","comment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  REMOVE_POST,\n  ADD_POST,\n  UPDATE_POST,\n  VOTE,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  FETCH_POST\n} from \"./types\";\n\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api/posts\";\n\n\nexport function getPostFromAPI(id) {\n  return async function (dispatch) {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return dispatch(getPost(response.data));\n  };\n}\n\nfunction getPost(post) {\n  return {\n    type: FETCH_POST,\n    post,\n  };\n}\n\nexport function sendPostToAPI(title, description, body) {\n  return async function (dispatch) {\n    const response = await axios.post(`${API_URL}`, {\n      title,\n      description,\n      body\n    });\n    return dispatch(addPost(response.data));\n  };\n}\n\nfunction addPost(post) {\n  return {\n    type: ADD_POST,\n    post\n  };\n}\n\nexport function removePostFromAPI(id) {\n  return async function (dispatch) {\n    await axios.delete(`${API_URL}/${id}`);\n    return dispatch(removePost(id));\n  };\n}\n\nfunction removePost(postId) {\n  return {\n    type: REMOVE_POST,\n    postId\n  };\n}\n\nexport function updatePostInAPI(id, title, description, body) {\n  return async function (dispatch) {\n    const response = await axios.put(`${API_URL}/${id}`, {\n      title,\n      description,\n      body\n    });\n    return dispatch(updatePost(response.data));\n  };\n}\n\nfunction updatePost(post) {\n  return {\n    type: UPDATE_POST,\n    post,\n  };\n}\n\nexport function sendVoteToAPI(id, direction) {\n  return async function (dispatch) {\n    const response = await axios.post(`${API_URL}/${id}/vote/${direction}`);\n    return dispatch(vote(id, response.data.votes));\n  };\n}\n\nfunction vote(postId, votes) {\n  return {\n    type: VOTE,\n    postId: postId,\n    votes: votes,\n  };\n}\n\nexport function removeCommentFromAPI(postId, commentId) {\n  return async function (dispatch) {\n    await axios.delete(`${API_URL}/${postId}/comments/${commentId}`);\n    return dispatch(removeComment(postId, commentId));\n  };\n}\n\nfunction removeComment(postId, commentId) {\n  return {\n    type: REMOVE_COMMENT,\n    postId,\n    commentId,\n  };\n}\n\nexport function sendCommentToAPI(postId, text) {\n  return async function (dispatch) {\n    const result = await axios.post(`${API_URL}/${postId}/comments/`, { text });\n    return dispatch(addComment(postId, result.data));\n  };\n}\n\nfunction addComment(postId, comment) {\n  return { type: ADD_COMMENT, postId, comment };\n}\n"]},"metadata":{},"sourceType":"module"}
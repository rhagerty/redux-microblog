{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlhag\\\\OneDrive\\\\Desktop\\\\Coding Pt 2\\\\redux-microblog\\\\src\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./posts.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { removePost, updatePost } from \"./actions/PostActions\";\nimport NewPostForm from \"./NewPostForm\"; // import CommentList from \"./CommentList\";\n\nimport BlogList from \"./BlogList\"; // import CommentForm from \"./CommentForm\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post(props) {\n  _s();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const postId = Number(useParams().postId);\n  const history = useHistory();\n  const post = useSelector(st => st.posts[postId]);\n  const dispatch = useDispatch();\n  /** If we don't have the post, request it from API. */\n  // useEffect(function loadPostWhenPostOrIdChanges() {\n  //   async function getPost() {\n  //     dispatch(getPostFromAPI(postId));\n  //   }\n  //   if (!post) {\n  //     getPost();\n  //   }\n  // }, [dispatch, postId, post]);\n\n  /** Toggle editing on/off */\n\n  function toggleEdit() {\n    setIsEditing(edit => !edit);\n  }\n  /** Handle post editing: adds to backend. */\n\n\n  function edit({\n    title,\n    description,\n    body\n  }) {\n    dispatch(updatePost(postId, title, description, body));\n    toggleEdit();\n  }\n  /** Handle post deletion: deletes from backend. */\n\n\n  function deletePost() {\n    dispatch(removePost(postId));\n    history.push(\"/\");\n  }\n  /** Handle voting in backend. */\n  // function vote(direction) {\n  //   dispatch(sendVoteToAPI(postId, direction));\n  // }\n\n  /** Handle adding a comment: adds to backend. */\n  // function addComment(text) {\n  //   dispatch(sendCommentToAPI(postId, text));\n  // }\n\n  /** Handle deleting a comment in backend. */\n  // function deleteComment(commentId) {\n  //   dispatch(removeCommentFromAPI(postId, commentId));\n  // }\n\n  /** Render:\r\n   *\r\n   * - if not post yet, a loading message\r\n   * - if editing, the edit form & comments\r\n   * - if not, the display & comments\r\n   */\n\n\n  if (!post) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Post\",\n    children: isEditing ? /*#__PURE__*/_jsxDEV(NewPostForm, {\n      post: post,\n      save: edit,\n      cancel: toggleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(BlogList, {\n      post: post,\n      toggleEdit: toggleEdit,\n      deletePost: deletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"ITlp/TIVjbQ5FMO81md5PlmDlgw=\", false, function () {\n  return [useParams, useHistory, useSelector, useDispatch];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/rlhag/OneDrive/Desktop/Coding Pt 2/redux-microblog/src/Post.js"],"names":["React","useState","useSelector","useDispatch","useParams","useHistory","removePost","updatePost","NewPostForm","BlogList","Post","props","isEditing","setIsEditing","postId","Number","history","post","st","posts","dispatch","toggleEdit","edit","title","description","body","deletePost","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,aAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,SACEC,UADF,EACcC,UADd,QAEO,uBAFP;AAGA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMa,MAAM,GAAGC,MAAM,CAACX,SAAS,GAAGU,MAAb,CAArB;AACA,QAAME,OAAO,GAAGX,UAAU,EAA1B;AACA,QAAMY,IAAI,GAAGf,WAAW,CAACgB,EAAE,IAAIA,EAAE,CAACC,KAAH,CAASL,MAAT,CAAP,CAAxB;AACA,QAAMM,QAAQ,GAAGjB,WAAW,EAA5B;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,WAASkB,UAAT,GAAsB;AACpBR,IAAAA,YAAY,CAACS,IAAI,IAAI,CAACA,IAAV,CAAZ;AACD;AAED;;;AAEA,WAASA,IAAT,CAAc;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,GAAd,EAA4C;AAC1CL,IAAAA,QAAQ,CAACb,UAAU,CACjBO,MADiB,EAEjBS,KAFiB,EAGjBC,WAHiB,EAIjBC,IAJiB,CAAX,CAAR;AAOAJ,IAAAA,UAAU;AACX;AAED;;;AAEA,WAASK,UAAT,GAAsB;AACpBN,IAAAA,QAAQ,CAACd,UAAU,CAACQ,MAAD,CAAX,CAAR;AACAE,IAAAA,OAAO,CAACW,IAAR,CAAa,GAAb;AACD;AAED;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;;;AAEE,MAAI,CAACV,IAAL,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cAEGL,SAAS,gBACN,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEK,IAAnB;AAAyB,MAAA,IAAI,EAAEK,IAA/B;AAAqC,MAAA,MAAM,EAAED;AAA7C;AAAA;AAAA;AAAA;AAAA,YADM,gBAEN,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEJ,IAAhB;AACc,MAAA,UAAU,EAAEI,UAD1B;AAEc,MAAA,UAAU,EAAEK;AAF1B;AAAA;AAAA;AAAA;AAAA;AAJN;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GA1FQhB,I;UAGeN,S,EACNC,U,EACHH,W,EACIC,W;;;KANVO,I;AA4FT,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./posts.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  removePost, updatePost\r\n} from \"./actions/PostActions\";\r\nimport NewPostForm from \"./NewPostForm\";\r\n// import CommentList from \"./CommentList\";\r\nimport BlogList from \"./BlogList\";\r\n// import CommentForm from \"./CommentForm\";\r\n\r\n\r\nfunction Post(props) {\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const postId = Number(useParams().postId);\r\n  const history = useHistory();\r\n  const post = useSelector(st => st.posts[postId]);\r\n  const dispatch = useDispatch();\r\n\r\n  /** If we don't have the post, request it from API. */\r\n\r\n  // useEffect(function loadPostWhenPostOrIdChanges() {\r\n  //   async function getPost() {\r\n  //     dispatch(getPostFromAPI(postId));\r\n  //   }\r\n  //   if (!post) {\r\n  //     getPost();\r\n  //   }\r\n  // }, [dispatch, postId, post]);\r\n\r\n  /** Toggle editing on/off */\r\n\r\n  function toggleEdit() {\r\n    setIsEditing(edit => !edit);\r\n  }\r\n\r\n  /** Handle post editing: adds to backend. */\r\n\r\n  function edit({ title, description, body }) {\r\n    dispatch(updatePost(\r\n      postId,\r\n      title,\r\n      description,\r\n      body\r\n    ));\r\n\r\n    toggleEdit();\r\n  }\r\n\r\n  /** Handle post deletion: deletes from backend. */\r\n\r\n  function deletePost() {\r\n    dispatch(removePost(postId));\r\n    history.push(\"/\");\r\n  }\r\n\r\n  /** Handle voting in backend. */\r\n\r\n  // function vote(direction) {\r\n  //   dispatch(sendVoteToAPI(postId, direction));\r\n  // }\r\n\r\n  /** Handle adding a comment: adds to backend. */\r\n\r\n  // function addComment(text) {\r\n  //   dispatch(sendCommentToAPI(postId, text));\r\n  // }\r\n\r\n  /** Handle deleting a comment in backend. */\r\n\r\n  // function deleteComment(commentId) {\r\n  //   dispatch(removeCommentFromAPI(postId, commentId));\r\n  // }\r\n\r\n  /** Render:\r\n   *\r\n   * - if not post yet, a loading message\r\n   * - if editing, the edit form & comments\r\n   * - if not, the display & comments\r\n   */\r\n\r\n  if (!post) return <p>Loading</p>;\r\n\r\n  return (\r\n    <div className=\"Post\">\r\n\r\n      {isEditing\r\n        ? <NewPostForm post={post} save={edit} cancel={toggleEdit} />\r\n        : <BlogList post={post}\r\n                        toggleEdit={toggleEdit}\r\n                        deletePost={deletePost} />}\r\n\r\n      {/* <section className=\"Post-comments mb-4\">\r\n        <h4>Comments</h4>\r\n        <CommentList comments={post.comments}\r\n                      deleteComment={deleteComment} />\r\n        <CommentForm submitCommentForm={addComment} />\r\n      </section> */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}
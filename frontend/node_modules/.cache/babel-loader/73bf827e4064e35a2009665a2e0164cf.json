{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlhag\\\\OneDrive\\\\Desktop\\\\Coding Pt 2\\\\redux-microblog\\\\frontend\\\\src\\\\components\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Post.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getPostFromAPI, updatePostInAPI, sendVoteToAPI, sendCommentToAPI, removeCommentFromAPI, removePostFromAPI } from \"../actions/posts\";\nimport PostForm from \"../components/PostForm\";\nimport CommentList from \"../components/CommentList\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport CommentForm from \"../components/CommentForm\";\n/** Post:\n *\n * - get post data from API, if not present\n * - allows post to be edited (toggleEdit is local state for this)\n * - handles edit form submission\n * - handles add-comment form submission\n * - handles comment-deletion\n * - handles post-deletion\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post(props) {\n  _s();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const postId = Number(useParams().postId);\n  const history = useHistory();\n  const post = useSelector(st => st.posts[postId]);\n  const dispatch = useDispatch();\n  /** If we don't have the post, request it from API. */\n\n  useEffect(function loadPostWhenPostOrIdChanges() {\n    async function getPost() {\n      dispatch(getPostFromAPI(postId));\n    }\n\n    if (!post) {\n      getPost();\n    }\n  }, [dispatch, postId, post]);\n  /** Toggle editing on/off */\n\n  function toggleEdit() {\n    setIsEditing(edit => !edit);\n  }\n  /** Handle post editing: adds to backend. */\n\n\n  function edit({\n    title,\n    description,\n    body\n  }) {\n    dispatch(updatePostInAPI(postId, title, description, body));\n    toggleEdit();\n  }\n  /** Handle post deletion: deletes from backend. */\n\n\n  function deletePost() {\n    dispatch(removePostFromAPI(postId));\n    history.push(\"/\");\n  }\n  /** Handle voting in backend. */\n\n\n  function vote(direction) {\n    dispatch(sendVoteToAPI(postId, direction));\n  }\n  /** Handle adding a comment: adds to backend. */\n\n\n  function addComment(text) {\n    dispatch(sendCommentToAPI(postId, text));\n  }\n  /** Handle deleting a comment in backend. */\n\n\n  function deleteComment(commentId) {\n    dispatch(removeCommentFromAPI(postId, commentId));\n  }\n  /** Render:\n   *\n   * - if not post yet, a loading message\n   * - if editing, the edit form & comments\n   * - if not, the display & comments\n   */\n\n\n  if (!post) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Post\",\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(PostForm, {\n      post: post,\n      save: edit,\n      cancel: toggleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(PostDisplay, {\n      post: post,\n      toggleEdit: toggleEdit,\n      deletePost: deletePost,\n      doVote: vote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"Post-comments mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n        comments: post.comments,\n        deleteComment: deleteComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n        submitCommentForm: addComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"YkV2n3TvmzGL7EPQ9sUP0sj4Ux0=\", false, function () {\n  return [useParams, useHistory, useSelector, useDispatch];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/rlhag/OneDrive/Desktop/Coding Pt 2/redux-microblog/frontend/src/components/Post.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useParams","useHistory","getPostFromAPI","updatePostInAPI","sendVoteToAPI","sendCommentToAPI","removeCommentFromAPI","removePostFromAPI","PostForm","CommentList","PostDisplay","CommentForm","Post","props","isEditing","setIsEditing","postId","Number","history","post","st","posts","dispatch","loadPostWhenPostOrIdChanges","getPost","toggleEdit","edit","title","description","body","deletePost","push","vote","direction","addComment","text","deleteComment","commentId","comments"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Post.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport {\n  getPostFromAPI,\n  updatePostInAPI,\n  sendVoteToAPI,\n  sendCommentToAPI,\n  removeCommentFromAPI,\n  removePostFromAPI\n} from \"../actions/posts\";\nimport PostForm from \"../components/PostForm\";\nimport CommentList from \"../components/CommentList\";\nimport PostDisplay from \"../components/PostDisplay\";\nimport CommentForm from \"../components/CommentForm\";\n\n/** Post:\n *\n * - get post data from API, if not present\n * - allows post to be edited (toggleEdit is local state for this)\n * - handles edit form submission\n * - handles add-comment form submission\n * - handles comment-deletion\n * - handles post-deletion\n */\n\nfunction Post(props) {\n\n  const [isEditing, setIsEditing] = useState(false);\n  const postId = Number(useParams().postId);\n  const history = useHistory();\n  const post = useSelector(st => st.posts[postId]);\n  const dispatch = useDispatch();\n\n  /** If we don't have the post, request it from API. */\n\n  useEffect(function loadPostWhenPostOrIdChanges() {\n    async function getPost() {\n      dispatch(getPostFromAPI(postId));\n    }\n    if (!post) {\n      getPost();\n    }\n  }, [dispatch, postId, post]);\n\n  /** Toggle editing on/off */\n\n  function toggleEdit() {\n    setIsEditing(edit => !edit);\n  }\n\n  /** Handle post editing: adds to backend. */\n\n  function edit({ title, description, body }) {\n    dispatch(updatePostInAPI(\n      postId,\n      title,\n      description,\n      body\n    ));\n\n    toggleEdit();\n  }\n\n  /** Handle post deletion: deletes from backend. */\n\n  function deletePost() {\n    dispatch(removePostFromAPI(postId));\n    history.push(\"/\");\n  }\n\n  /** Handle voting in backend. */\n\n  function vote(direction) {\n    dispatch(sendVoteToAPI(postId, direction));\n  }\n\n  /** Handle adding a comment: adds to backend. */\n\n  function addComment(text) {\n    dispatch(sendCommentToAPI(postId, text));\n  }\n\n  /** Handle deleting a comment in backend. */\n\n  function deleteComment(commentId) {\n    dispatch(removeCommentFromAPI(postId, commentId));\n  }\n\n  /** Render:\n   *\n   * - if not post yet, a loading message\n   * - if editing, the edit form & comments\n   * - if not, the display & comments\n   */\n\n  if (!post) return <p>Loading</p>;\n\n  return (\n    <div className=\"Post\">\n\n      {isEditing\n        ? <PostForm post={post} save={edit} cancel={toggleEdit} />\n        : <PostDisplay post={post}\n                        toggleEdit={toggleEdit}\n                        deletePost={deletePost}\n                        doVote={vote} />}\n\n      <section className=\"Post-comments mb-4\">\n        <h4>Comments</h4>\n        <CommentList comments={post.comments}\n                      deleteComment={deleteComment} />\n        <CommentForm submitCommentForm={addComment} />\n      </section>\n\n    </div>\n  );\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}